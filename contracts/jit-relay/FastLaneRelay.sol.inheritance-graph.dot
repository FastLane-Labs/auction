digraph "" {
Ownable -> Context;
Ownable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Ownable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkOwner()</TD></TR><TR><TD align="left">    _transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >];

Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

ERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    permit(address,address,uint256,uint256,uint8,bytes32,bytes32)</TD></TR><TR><TD align="left">    DOMAIN_SEPARATOR()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    computeDomainSeparator()</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    name</TD></TR><TR><TD align="left">    symbol</TD></TR><TR><TD align="left">    decimals</TD></TR><TR><TD align="left">    totalSupply</TD></TR><TR><TD align="left">    balanceOf</TD></TR><TR><TD align="left">    allowance</TD></TR><TR><TD align="left">    nonces</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    INITIAL_CHAIN_ID</TD></TR><TR><TD align="left">    INITIAL_DOMAIN_SEPARATOR</TD></TR></TABLE> >];

ReentrancyGuard[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ReentrancyGuard</B></TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    nonReentrant()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    locked</TD></TR></TABLE> >];

SafeTransferLib[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>SafeTransferLib</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    safeTransferETH(address,uint256)</TD></TR><TR><TD align="left">    safeTransferFrom(ERC20,address,address,uint256)</TD></TR><TR><TD align="left">    safeTransfer(ERC20,address,uint256)</TD></TR><TR><TD align="left">    safeApprove(ERC20,address,uint256)</TD></TR></TABLE> >];

IFastLaneAuction[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IFastLaneAuction</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    MAX_AUCTION_VALUE()</TD></TR><TR><TD align="left">    auctionInitialized()</TD></TR><TR><TD align="left">    auctionStarter()</TD></TR><TR><TD align="left">    auction_live()</TD></TR><TR><TD align="left">    auction_number()</TD></TR><TR><TD align="left">    autopay_batch_size()</TD></TR><TR><TD align="left">    bid_increment()</TD></TR><TR><TD align="left">    bid_token()</TD></TR><TR><TD align="left">    checker()</TD></TR><TR><TD align="left">    disableOpportunityAddress(address)</TD></TR><TR><TD align="left">    disableValidatorAddress(address)</TD></TR><TR><TD align="left">    enableOpportunityAddress(address)</TD></TR><TR><TD align="left">    enableValidatorAddress(address)</TD></TR><TR><TD align="left">    enableValidatorAddressWithPreferences(address,uint128,address)</TD></TR><TR><TD align="left">    endAuction()</TD></TR><TR><TD align="left">    fast_lane_fee()</TD></TR><TR><TD align="left">    findFinalizedAuctionWinnerAtAuction(uint128,address,address)</TD></TR><TR><TD align="left">    findLastFinalizedAuctionWinner(address,address)</TD></TR><TR><TD align="left">    findLiveAuctionTopBid(address,address)</TD></TR><TR><TD align="left">    getActivePrivilegesAuctionNumber()</TD></TR><TR><TD align="left">    getAutopayJobs(uint16,uint128)</TD></TR><TR><TD align="left">    getCheckpoint(address)</TD></TR><TR><TD align="left">    getPreferences(address)</TD></TR><TR><TD align="left">    getStatus(address)</TD></TR><TR><TD align="left">    getValidatorsactiveAtAuctionRound(uint128)</TD></TR><TR><TD align="left">    initialSetupAuction(address,address,address)</TD></TR><TR><TD align="left">    max_gas_price()</TD></TR><TR><TD align="left">    minAutoShipThreshold()</TD></TR><TR><TD align="left">    ops()</TD></TR><TR><TD align="left">    outstandingFLBalance()</TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    processAutopayJobs(address[])</TD></TR><TR><TD align="left">    redeemOutstandingBalance(address)</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    setAutopayBatchSize(uint16)</TD></TR><TR><TD align="left">    setBidToken(address)</TD></TR><TR><TD align="left">    setFastlaneFee(uint24)</TD></TR><TR><TD align="left">    setMinimumAutoShipThreshold(uint128)</TD></TR><TR><TD align="left">    setMinimumBidIncrement(uint256)</TD></TR><TR><TD align="left">    setOffchainCheckerDisabledState(bool)</TD></TR><TR><TD align="left">    setOps(address)</TD></TR><TR><TD align="left">    setPausedState(bool)</TD></TR><TR><TD align="left">    setResolverMaxGasPrice(uint128)</TD></TR><TR><TD align="left">    setStarter(address)</TD></TR><TR><TD align="left">    setValidatorPreferences(uint128,address)</TD></TR><TR><TD align="left">    startAuction()</TD></TR><TR><TD align="left">    submitBid(IFastLaneAuction.Bid)</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left">    withdrawStuckERC20(address)</TD></TR><TR><TD align="left">    withdrawStuckNativeToken(uint256)</TD></TR></TABLE> >];

FastLaneRelayEvents[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>FastLaneRelayEvents</B></TD></TR></TABLE> >];

FastLaneRelay -> FastLaneRelayEvents [ label="1" ];
FastLaneRelay -> Ownable [ label="2" ];
FastLaneRelay -> ReentrancyGuard [ label="3" ];
FastLaneRelay[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>FastLaneRelay</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    submitFlashBid(uint256,bytes32,address,address,bytes)</TD></TR><TR><TD align="left">    checkAllowedInAuction(address)</TD></TR><TR><TD align="left">    DOMAIN_SEPARATOR()</TD></TR><TR><TD align="left">    setPausedState(bool)</TD></TR><TR><TD align="left">    setFastlaneRelayFee(uint24)</TD></TR><TR><TD align="left">    enableRelayValidatorAddress(address)</TD></TR><TR><TD align="left">    disableRelayValidatorAddress(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _calculateRelayCuts(uint256,uint24)</TD></TR><TR><TD align="left">    computeDomainSeparator()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    whenNotPaused()</TD></TR><TR><TD align="left">    onlyParticipatingValidators()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    fastlaneAddress</TD></TR><TR><TD align="left">    vaultAddress</TD></TR><TR><TD align="left">    paused</TD></TR><TR><TD align="left">    fastlaneRelayFee</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    INITIAL_CHAIN_ID</TD></TR><TR><TD align="left">    INITIAL_DOMAIN_SEPARATOR</TD></TR><TR><TD align="left">    validatorsMap</TD></TR></TABLE> >];

}